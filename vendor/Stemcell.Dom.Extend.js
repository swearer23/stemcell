// Generated by CoffeeScript 1.4.0
(function() {

  Stemcell.Dom = {
    toggleCheckBox: function(targetObj) {
      var checkboxObj;
      targetObj = $(targetObj);
      checkboxObj = $("#" + targetObj.attr("forid"));
      if (targetObj.hasClass("checked")) {
        targetObj.removeClass("checked");
        return checkboxObj.removeAttr("checked");
      } else {
        targetObj.addClass("checked");
        return checkboxObj.attr("checked", "");
      }
    },
    form2Obj: function(form) {
      return this.formArray2Obj($(form).serializeArray());
    },
    formArray2Obj: function(formArray) {
      var ele, form, key, obj, val, _i, _len;
      obj = {};
      for (_i = 0, _len = formArray.length; _i < _len; _i++) {
        form = formArray[_i];
        key = form["name"];
        val = form["value"];
        if (obj[key]) {
          ele = obj[key];
          if (ele instanceof Array) {
            obj[key].push(val);
          } else {
            obj[key] = [ele, val];
          }
        } else {
          obj[key] = val;
        }
      }
      return obj;
    },
    rollToTop: function(fn, duration, toScrollTop) {
      var interval, st, step;
      duration = duration || 50;
      toScrollTop = toScrollTop || 0;
      st = $(document).scrollTop();
      step = (st - toScrollTop) / duration;
      return interval = setInterval(function() {
        if (st > toScrollTop) {
          st = st - step;
          return $(document).scrollTop(st);
        } else {
          $(document).scrollTop(toScrollTop);
          if (fn instanceof Function) {
            fn();
          }
          return clearInterval(interval);
        }
      }, 1);
    },
    rollToBottom: function(fn, duration, toScrollTop) {
      var interval, st, step;
      duration = duration || 50;
      toScrollTop = toScrollTop || 0;
      st = $(document).scrollTop();
      step = (st - toScrollTop) / duration;
      return interval = setInterval(function() {
        if (st > toScrollTop) {
          st = st - step;
          return $(document).scrollTop(st);
        } else {
          $(document).scrollTop(toScrollTop);
          if (fn instanceof Function) {
            fn();
          }
          return clearInterval(interval);
        }
      }, 1);
    },
    inputOnFocus: function(target) {
      target = $(target);
      return target.addClass('focusedInput');
    },
    inputOnBlur: function(target) {
      target = $(target);
      return target.removeClass('focusedInput');
    },
    getCookie: function(name) {
      var r;
      r = document.cookie.match("\\b" + name + "=([^;]*)\\b");
      r = r ? r[1] : void 0;
      return r;
    },
    delCookie: function(name) {
      var date;
      date = new Date();
      date.setTime(date.getTime() - 1000000);
      document.cookie = name + "=a; expires=" + date.toGMTString();
      return document.cookie = name + "=a; expires=" + date.toGMTString();
    },
    cover: function(obj) {
      var height, width;
      obj = $(obj);
      width = obj.outerWidth();
      height = obj.outerHeight();
      obj.css({
        'position': 'relative'
      });
      obj.append('<div class="cover"></div>');
      return obj.find(".cover").css({
        width: width,
        height: height,
        "opacity": 0.8
      });
    },
    uncover: function(obj) {
      obj = $(obj);
      return obj.find(".cover").remove();
    },
    log: function(obj) {
      return false;
    }
  };

}).call(this);
