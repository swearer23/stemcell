// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function() {
  var Backbone, Stemcell, error, log, root;
  root = this;
  if (typeof exports !== 'undefined') {
    Stemcell = exports;
  } else {
    Stemcell = root.Stemcell = {};
  }
  Backbone = root.Backbone;
  if (!Backbone && typeof require !== 'undefined') {
    Backbone = require('backbone');
  }
  Stemcell.history = Backbone.history;
  Stemcell.sync = Backbone.sync;
  Stemcell.setEmulateJSON = function(option) {
    return Backbone.emulateJSON = option;
  };
  Stemcell.setEmulateHTTP = function(option) {
    return Backbone.emulateHTTP = option;
  };
  log = function(object) {
    if (typeof console !== 'undefined') {
      return console.log(object);
    }
  };
  error = function(object) {
    throw object;
  };
  Stemcell.View = (function(_super) {

    __extends(View, _super);

    function View() {
      this.dispose = __bind(this.dispose, this);
      this.staticEl = this.el;
      View.__super__.constructor.apply(this, arguments);
      this.initialize.apply(this, arguments);
      this.init();
      this.ensureEl();
    }

    View.prototype.staticEl = null;

    View.prototype.dom = null;

    View.prototype.init = function() {};

    View.prototype.setTemplate = function(templateString, args) {
      args = args || {};
      return this.template = _.template(templateString, args);
    };

    View.prototype.fire = function(evt, options) {
      return this.onFireEvent(evt, options);
    };

    View.prototype.onFireEvent = function(evt) {};

    View.prototype.dispose = function() {
      var k, selector, v, _ref;
      _ref = this.events;
      for (k in _ref) {
        v = _ref[k];
        selector = k.split(' ')[1];
        this.$el.find(selector).off();
      }
      if (this.dom && this.dom.remove) {
        return $(this.dom).remove();
      }
    };

    View.prototype.ensureEl = function() {
      var _this;
      _this = this;
      this.afterRender = this.render;
      return this.render = function() {
        this.$el = $(this.staticEl);
        this.afterRender.apply(this, arguments);
        return this.setRelatedDom();
      };
    };

    View.prototype.setRelatedDom = function() {};

    return View;

  })(Backbone.View);
  Stemcell.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.setMessengers = function(messengerClass) {
      var k, v, _results;
      if (!_.has(window, 'ribosome')) {
        this.ribosome = window.ribosome = this.ribosome = Stemcell.Ribosome.getInstance();
      }
      _results = [];
      for (k in messengerClass) {
        v = messengerClass[k];
        this[k] = new v;
        _results.push(this.ribosome.pushMessenger(this[k], this.ribosome.documentMessenger));
      }
      return _results;
    };

    Router.prototype.call = function() {
      return this.ribosome.documentMessenger.call.apply(this, arguments);
    };

    return Router;

  })(Backbone.Router);
  Stemcell.Ribosome = (function() {

    function Ribosome() {}

    Ribosome.getInstance = function() {
      if (!this.instance) {
        this.instance = new this;
        this.instance.init();
      }
      return this.instance;
    };

    Ribosome.prototype.messengers = {};

    Ribosome.prototype.tree = {};

    Ribosome.prototype.init = function() {
      this.pushMessenger(Stemcell.DocumentMessenger.getInstance());
      this.documentMessenger = this.messengers.messenger_1.messenger;
      return this;
    };

    Ribosome.prototype.pushMessenger = function(messenger, parent) {
      var mid, uid;
      if (messenger instanceof Stemcell.Messenger) {
        uid = this.getID();
        mid = 'messenger_' + uid;
        messenger.mid = mid;
        this.messengers[mid] = {
          uid: uid,
          messenger: messenger
        };
        this.buildTree(this.messengers[mid].messenger, parent);
        return mid;
      }
    };

    Ribosome.prototype.getMessenger = function(key) {
      var k, messengers, _i, _len;
      if (!(key instanceof Array)) {
        try {
          return this.messengers[key].messenger;
        } catch (err) {
          return alert(key);
        }
      } else {
        messengers = [];
        for (_i = 0, _len = key.length; _i < _len; _i++) {
          k = key[_i];
          messengers.push(this.messengers[k].messenger);
        }
        return messengers;
      }
    };

    Ribosome.prototype.getParentMessengerByMid = function(mid) {
      var self;
      self = this.tree[mid];
      return this.getMessenger(self.parent);
    };

    Ribosome.prototype.getChildrenMessengerByMid = function(mid) {
      var children,
        _this = this;
      children = _.filter(this.tree, function(m) {
        return m.parent === mid;
      });
      return children = _.map(children, function(c) {
        return _this.messengers[c.mid];
      });
    };

    Ribosome.prototype.buildTree = function(messenger, parent) {
      var _m;
      if (parent) {
        _m = {
          mid: messenger.mid,
          parent: parent.mid
        };
      } else {
        _m = {
          mid: messenger.mid,
          parent: 'messenger_0'
        };
      }
      return this.tree[messenger.mid] = _m;
    };

    Ribosome.prototype.getLevel = function(mid) {
      var level, parent, self;
      self = this.tree[mid];
      level = 0;
      while (parent !== 0) {
        parent = this.tree[self.parent].mid;
        level += 1;
        self = parent;
      }
      return level;
    };

    Ribosome.prototype.removeMessengerByMid = function(mid) {
      var c, children, _i, _len;
      children = this.getChildrenMessengerByMid(mid);
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        c = children[_i];
        c.messenger.dispose();
      }
      this.messengers[mid] = null;
      delete this.messengers[mid];
      delete this.tree[mid];
      return this.messengers;
    };

    Ribosome.prototype.getID = function() {
      var max;
      max = _.max(this.messengers, function(m) {
        return m.uid;
      });
      if (max) {
        return max.uid + 1;
      } else {
        return 1;
      }
    };

    return Ribosome;

  })();
  Stemcell.Messenger = (function() {

    function Messenger() {
      this.pushChildrenMessenger = __bind(this.pushChildrenMessenger, this);

      this.compose = __bind(this.compose, this);

      var args,
        _this = this;
      this.views;
      this.models;
      this.modelEvents;
      this.composeBufferHash = {};
      this.childrenMessengerID = {};
      args = arguments;
      setTimeout(function() {
        return _this.initialize.apply(_this, args, 10);
      });
    }

    Messenger.prototype.initialize = function() {};

    Messenger.prototype.compose = function(hash) {
      var k, v, _results,
        _this = this;
      _results = [];
      for (k in hash) {
        v = hash[k];
        this.pushChildrenMessenger(k, v);
        _results.push(v.die = function() {
          return _this.decompose(k);
        });
      }
      return _results;
    };

    Messenger.prototype.decompose = function(key) {
      var childMessenger, k, v, _ref, _results;
      _ref = this.childrenMessengerID;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (k === key) {
          if (childMessenger = this.getChildrenMessenger(k)) {
            childMessenger.dispose();
          }
          _results.push(delete this.childrenMessengerID[k]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Messenger.prototype.pushChildrenMessenger = function(k, v) {
      var mid;
      mid = ribosome.pushMessenger(v, this);
      return this.childrenMessengerID[k] = mid;
    };

    Messenger.prototype.getChildrenMessenger = function(key) {
      var k, messengers, _i, _len;
      messengers = [];
      if (key) {
        if (!(key instanceof Array)) {
          key = this.childrenMessengerID[key];
          return ribosome.getMessenger(key);
        }
      } else {
        key = _.keys(this.childrenMessengerID);
      }
      for (_i = 0, _len = key.length; _i < _len; _i++) {
        k = key[_i];
        messengers.push(this.childrenMessengerID[k]);
      }
      return ribosome.getMessenger(messengers);
    };

    Messenger.prototype.getParentMessenger = function() {
      return ribosome.getParentMessengerByMid(this.mid);
    };

    Messenger.prototype.call = function(receiver, signal, options) {
      return receiver.onReceive(this, signal, options);
    };

    Messenger.prototype.receivers = {};

    Messenger.prototype.onReceive = function(caller, signal, options) {
      var handlerName;
      handlerName = ['onReceive', signal[0].toUpperCase(), signal.slice(1)].join('');
      if (this[handlerName] instanceof Function) {
        this.handler = this[handlerName];
      } else if (_.has(this.receivers, signal)) {
        this.handler = this.receivers[signal];
      } else {
        log('received ' + signal + ', no handler, ignored');
        return;
      }
      this.handler(caller, options);
      return this.handler = null;
    };

    Messenger.prototype.assemble = function(args) {
      var k, renderArgs, view, _ref;
      if (args) {
        for (k in args) {
          renderArgs = args[k];
          view = this.views[k];
          view.render(renderArgs);
        }
      } else {
        _ref = this.views;
        for (k in _ref) {
          view = _ref[k];
          view.render();
        }
      }
      return this._extra();
    };

    Messenger.prototype.setViews = function(viewMap) {
      this.views = viewMap;
      return this.bindingViewEvents();
    };

    Messenger.prototype.unsetViews = function() {
      return this.views = {};
    };

    Messenger.prototype.getView = function(key) {
      return this.views[key];
    };

    Messenger.prototype.bindingViewEvents = function() {
      var k, view, _ref, _results, _this;
      _ref = this.views;
      _results = [];
      for (k in _ref) {
        view = _ref[k];
        _this = this;
        _results.push(view.onFireEvent = (function(k) {
          return function(event, options) {
            return _this.catchViewEvent(event, k, options);
          };
        })(k));
      }
      return _results;
    };

    Messenger.prototype.catchViewEvent = function(event, key, options) {
      var handler, view;
      handler = this.viewEvents[[key, event].join(":")];
      if (this[handler]) {
        view = this.views[key];
        return this[handler](event, view, options);
      } else {
        return log("caught view events: <" + handler + "> , but no handler in this messenger");
      }
    };

    Messenger.prototype.setModels = function(modelMap) {
      this.models = modelMap;
      return this.bindingModelEvents();
    };

    Messenger.prototype.unsetModels = function() {
      return this.models = {};
    };

    Messenger.prototype.getModel = function(key) {
      return this.models[key];
    };

    Messenger.prototype.bindingModelEvents = function() {
      var evt, evtExp, k, model, v, _ref, _results;
      _ref = this.modelEvents;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        evtExp = k.split(":");
        model = this.getModel(evtExp.shift());
        evt = evtExp.join(":");
        _results.push(model.on(evt, this[v], this));
      }
      return _results;
    };

    Messenger.prototype.unbindModelEvents = function() {
      var evtExp, k, model, v, _ref, _results;
      _ref = this.modelEvents;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        evtExp = k.split(":");
        model = this.getModel(evtExp.shift());
        _results.push(model.off(null, null, this));
      }
      return _results;
    };

    Messenger.prototype.die = function() {};

    Messenger.prototype.dispose = function() {
      var k, view, _ref;
      this.onDispose();
      this.viewEvents = {};
      this.receivers = {};
      this.modelEvents = {};
      this.unbindModelEvents();
      _ref = this.views;
      for (k in _ref) {
        view = _ref[k];
        view.dispose();
      }
      this.unsetViews();
      this.unsetModels();
      return ribosome.removeMessengerByMid(this.mid);
    };

    Messenger.prototype.onDispose = function() {};

    Messenger.prototype._extra = function() {};

    return Messenger;

  })();
  Stemcell.DocumentMessenger = (function(_super) {

    __extends(DocumentMessenger, _super);

    function DocumentMessenger() {
      return DocumentMessenger.__super__.constructor.apply(this, arguments);
    }

    DocumentMessenger.instance = null;

    DocumentMessenger.getInstance = function() {
      if (!this.instance) {
        this.instance = new this;
      }
      return this.instance;
    };

    return DocumentMessenger;

  })(Stemcell.Messenger);
  Stemcell.ListMessenger = (function(_super) {

    __extends(ListMessenger, _super);

    function ListMessenger() {
      this.spawnAll = __bind(this.spawnAll, this);

      this.spawn = __bind(this.spawn, this);

      this.getCollection = __bind(this.getCollection, this);
      return ListMessenger.__super__.constructor.apply(this, arguments);
    }

    ListMessenger.prototype.initialize = function() {
      return this._collection = [];
    };

    ListMessenger.prototype.setCollection = function(collection) {
      this._collection = collection;
      return this.bindingCollectionEvents();
    };

    ListMessenger.prototype.getCollection = function() {
      return this._collection;
    };

    ListMessenger.prototype.bindingCollectionEvents = function() {
      var k, v, _ref, _results,
        _this = this;
      _ref = this.collectionEvents;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this._collection.on(k, function() {
          return _this[v]();
        }, this));
      }
      return _results;
    };

    ListMessenger.prototype.spawn = function(index, subMessenger) {
      var obj;
      obj = {};
      obj[index] = subMessenger;
      return this.compose(obj);
    };

    ListMessenger.prototype.spawnAll = function(messengerClass, models) {
      var i, m, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = models.length; _i < _len; i = ++_i) {
        m = models[i];
        _results.push(this.spawn(i, new messengerClass(m)));
      }
      return _results;
    };

    ListMessenger.prototype.dispose = function() {
      this._collection.off(null, null, this);
      return ListMessenger.__super__.dispose.apply(this, arguments);
    };

    return ListMessenger;

  })(Stemcell.Messenger);
  Stemcell.Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    return Model;

  })(Backbone.Model);
  Stemcell.Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    return Collection;

  })(Backbone.Collection);
  Stemcell.log = Stemcell.View.prototype.log = Stemcell.Model.prototype.log = Stemcell.Messenger.prototype.log = Stemcell.Collection.prototype.log = log;
  return Stemcell.error = Stemcell.View.prototype.error = Stemcell.Model.prototype.error = Stemcell.Messenger.prototype.error = Stemcell.Collection.prototype.error = error;
}).call(this);
